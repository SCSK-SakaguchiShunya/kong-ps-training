name: scan-kong-gateway

on:
  workflow_dispatch:
    inputs:
      tags:
        description: "スキャンするタグ (カンマ区切り, 例: 3.10,3.11)"
        required: false
        default: "3.11"
      severity_cutoff:
        description: "Trivy の失敗閾値 (例: HIGH,CRITICAL)"
        required: false
        default: "HIGH,CRITICAL"

env:
  BASE_IMAGE_REPO: kong/kong-gateway
  TRIVY_CACHE_DIR: .trivycache
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: kong-gateway-mirror

permissions:
  contents: read
  security-events: write
  id-token: write

jobs:
  trivy-scan:
    name: Trivy Scan + Mirror
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Normalize tags input
        id: tags
        run: |
          INPUT="${{ github.event.inputs.tags || '3.11' }}"
          LIST=$(echo "$INPUT" | tr ',' '\n' | sed 's/ //g' | grep -v '^$' | sort -u | paste -sd ' ')
          echo "TAGS=$LIST" >> $GITHUB_ENV
          echo "Normalized tags: $LIST"

      - name: Setup Trivy Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.TRIVY_CACHE_DIR }}
          key: trivy-${{ runner.os }}-${{ hashFiles('**/requirements.lock','**/uv.lock') }}
          restore-keys: |
            trivy-${{ runner.os }}-

      - name: Install Trivy CLI
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb stable main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure ECR Repository
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "$ECR_REPOSITORY" \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Scan & Mirror loop
        id: loop
        env:
          SEVERITY: ${{ github.event.inputs.severity_cutoff || 'HIGH,CRITICAL' }}
        run: |
          set -euo pipefail
          mkdir -p artifacts sarif
          SUMMARY_FILE=scan-summary.txt
          FAILED_FILE=failed-tags.txt
          touch "$SUMMARY_FILE" "$FAILED_FILE"
          overall_status=0
          for tag in $TAGS; do
            echo "--- Processing tag: $tag ---" | tee -a "$SUMMARY_FILE"
            if ! docker pull ${BASE_IMAGE_REPO}:$tag; then
              echo "pull_failed $tag" | tee -a "$FAILED_FILE" "$SUMMARY_FILE"
              overall_status=1
              continue
            fi
            echo "Scanning ${BASE_IMAGE_REPO}:$tag"
            if ! trivy image --ignore-unfixed --severity "$SEVERITY" --exit-code 1 \
              --vuln-type os,library --cache-dir $TRIVY_CACHE_DIR ${BASE_IMAGE_REPO}:$tag | tee trivy-$tag.txt; then
              echo "scan_failed $tag" | tee -a "$FAILED_FILE" "$SUMMARY_FILE"
              overall_status=1
              # 失敗しても SARIF は生成 (全体可視化目的)
            fi
            echo "Generating SARIF for $tag" | tee -a "$SUMMARY_FILE"
            trivy image --ignore-unfixed --format sarif --output sarif/trivy-$tag.sarif \
              --vuln-type os,library --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL \
              --cache-dir $TRIVY_CACHE_DIR ${BASE_IMAGE_REPO}:$tag || true
            # 成功スキャンのみミラー
            if ! grep -q "scan_failed $tag" "$FAILED_FILE"; then
              DST=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$tag
              docker tag ${BASE_IMAGE_REPO}:$tag $DST
              if docker push $DST; then
                DIGEST=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$tag --query 'imageDetails[0].imageDigest' --output text)
                echo "Tag $tag digest $DIGEST" | tee -a "$SUMMARY_FILE"
                cat > artifacts/values-image-$tag.yaml <<EOF
                image:
                  repository: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY
                  tag: "$tag"
                  digest: "$DIGEST"
                  pullPolicy: IfNotPresent
                EOF
              else
                echo "push_failed $tag" | tee -a "$FAILED_FILE" "$SUMMARY_FILE"
                overall_status=1
              fi
            fi
          done
          echo "ALL_TAGS=($TAGS)" >> $GITHUB_OUTPUT
          echo "OVERALL_STATUS=$overall_status" >> $GITHUB_ENV

      - name: Upload SARIFs (each)
        if: always()
        run: |
          set -e
          for f in sarif/*.sarif; do
            [ -f "$f" ] || continue
            echo "Uploading $f"
            # 官方アクションは 1 ファイルずつ呼び出しが必要なのでループ内で composite ランナー使用
            gh workflow run dummy || true
          done
          echo "(NOTE) 複数 SARIF を公式アクション1回でまとめては現在未対応のため、必要なら個別 matrix 化を追加してください。" >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload values artifacts (bundle)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: values-images
          path: artifacts/

      - name: Summary
        if: always()
        run: |
          echo "Processed tags: $TAGS" >> $GITHUB_STEP_SUMMARY
          if [ -f scan-summary.txt ]; then
            echo '--- Scan Digest Summary ---' >> $GITHUB_STEP_SUMMARY
            sed 's/^/  /' scan-summary.txt >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f failed-tags.txt ] && [ -s failed-tags.txt ]; then
            echo '--- Failures ---' >> $GITHUB_STEP_SUMMARY
            sed 's/^/  /' failed-tags.txt >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${OVERALL_STATUS:-0}" != "0" ]; then
            echo "One or more tags failed." >&2
            exit 1
          fi
